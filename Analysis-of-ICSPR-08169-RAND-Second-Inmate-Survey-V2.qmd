---
title: "ICSPR_08169_ANA"
author: "Guan Xin"
format: html
editor: visual
output:
  rmdformats::readthedown:
    toc_depth: 6
    self_contained: yes
    thumbnails: yes
    lightbox: yes
    gallery: no
    highlight: tango
  prettydoc::html_pretty:
    theme: cayman
  html_document: default
---

# Prepare packages

```{r}
#theme pick
#library(rstudiothemes)
library(rmdformats)
library(prettydoc)

#package for data_ana
library(semTools)
library(haven)
library(tidyverse)
library(dplyr)
library(bruceR)
library(summarytools)
library(labelled)
library(lm.beta)
library(corrplot)
library(lavaan)
library(Gmisc)
library(psych)
library(parameters)
library(GPArotation)
library(finalfit)
library(demoGraphic)
library(vtable)
library(gtsummary)
library(janitor)

#for path analysis
library(devtools)
library(lavaan)
library(semPlot)
library(OpenMx)
library(knitr)
library(kableExtra)
library(GGally)
library(simsem)
library(remotes)
library(tidySEM)
library(ggplot2)
library(labelled)
```

# SECTION 1 Data choose and recode

Original data set include characters coding and all the data type are character. Data were recorded into in=teger, numeric or factor as required, as well as recorded the empty string and character into to NA or 0.

## import original data

```{r}
# data was downloaded from ICSPR website and researcher convert the SAS data file into SAV file in the SAS cloud service first.
imported <- read_spss("ICSPR_08169-0001-Data_original.sav")
```

## Select variables may needed and remove lables.

```{r}
used_var <- imported %>% 
  select(D9J, D18J, CJ1, CK6E, 
         CJ2,CJ3,CJ4A, CJ4B, CJ4C,CJ4D, CJ4E, CJ4F, CJ4G, CJ4H, CJ4I, CJ5, CK14I,
         C28D, 
         C9,C10,
         CA1, CA5, CB1, CB5,CC1, CC5, CF1, CF5,CG1, CG5,CH1, CH5,CI1,CI5, 
         B1A, B1B, B1C, B1D, B1E, B1F, B1G, B1H, B1I, B1J, B1K, B1L, B1M, B1N, B1O, B1P, 
         B2A, B2B, B2C, B2D, B2E, B2F, B2G, B2H, B2I, B2J, B2K, B2L, B2M, B2N, B2O, B3, B4, 
         B5A, B5B, B5C, B5D, B5E, B5F, B5G, B5H, B5I, B5J, B5K, B5L, B5M, B5N, B5O, B6, B7, 
         B8, 
         B9, B10, B11, CK8, CK8A,
         CA7, CB6, CC6, 
         CK9A, CK10, 
         CD1, CD2, CD3A, CD3B, CD3C, CD3D, CD3E, CD4, CD4A,
         CE1, CE2, CE3, CE4, CE5, CE7, CE7A,
         CK5, CK5A, CK5B, CK5C, CK5D, CK5E, CK5F, CK5G, CK5H, CK5I, CK5J, CK5K, CK5L,
         E1,E2,E3,E4,E5,D7,D16, C17,
         C23,C24,
         CK2,CK3,
         A14,A15,A17,
         CK12YR, CK12MO, CK13YR, CK13MO,
         CK14A, CK14B, CK14C, CK14D, CK14E, CK14F, CK14G, CK14H, CK14I,
         CA4A,CA4D,CA4F,CA4H,
         CB4A,CB4D,CB4F,CB4H,
         CF4A,CF4D,CF4F,CF4H,
         CG4A,CG4D,CG4F,CG4H,
         CH4A,CH4D,CH4F,CH4H,
         CI4A,CI4D,CI4F,CI4H)

used_var <- used_var %>% 
  remove_labels() %>% 
  remove_var_label()
```

## Select the drug dealer sample

```{r}
win3_sp <- used_var %>% 
  mutate(CJ1 = ifelse(CJ1 %in% c("1","3"), 2,
                      ifelse(CJ1 %in% c("2","4"),1, NA))) %>% 
  mutate(across(c(CJ1), as.integer)) %>% 
  filter(CJ1 == 2)
```

## Continuity in drug dealing during window period 1 to 3

```{r}
win3_w1w2_sp <- win3_sp %>% 
  mutate(continuity_drcr = ifelse(D18J == "1" & D9J == "1", 3,
                             ifelse(D18J != "1" & D9J == "1", 2, 
                                    ifelse(D18J == "1" & D9J != "1", 2,
                                           ifelse(D18J != "1" & D9J != "1", 1,0)))))

```

## No. and frequency of offence for each type crime

```{r}
#No. of offence for each type crime
win3_w1w2_sp <- win3_w1w2_sp %>% 
  mutate(across(c(CK14A, CK14B, CK14C, CK14D, CK14E, CK14F, CK14G, CK14H, CK14I), 
                ~ ifelse(.x=="0",0,
                         ifelse(.x == "1",1,
                                   ifelse(.x == "2",2,
                                          ifelse(.x == "3",3,
                                                 ifelse(.x == "4",4,NA)))))))


# Frequency of offence for each type crime
win3_w1w2_sp <- win3_w1w2_sp %>% 
  mutate(across(c(CJ4A,CJ4D,CJ4F,CJ4H,#drug dealing
                  CA4A,CA4D,CA4F,CA4H,#bur
                  CB4A,CB4D,CB4F,CB4H,#rob
                  CF4A,CF4D,CF4F,CF4H,#tef
                  CG4A,CG4D,CG4F,CG4H,#car
                  CH4A,CH4D,CH4F,CH4H,#for
                  CI4A,CI4D,CI4F,CI4H),#swi
                ~ ifelse(.x == "1",1,0))) %>% 
  mutate(drug_freq = ifelse(CJ4A == 1,4,
                           ifelse(CJ4D == 1,3,
                                  ifelse(CJ4F ==1, 2,
                                         ifelse(CJ4H==1, 1, 0))))) %>%
  mutate(bur_freq = ifelse(CA4A == 1,4,
                           ifelse(CA4D == 1,3,
                                  ifelse(CA4F ==1, 2,
                                         ifelse(CA4H==1, 1, 0))))) %>% 
  mutate(rob_freq = ifelse(CB4A == 1,4,
                           ifelse(CB4D == 1,3,
                                  ifelse(CB4F ==1, 2,
                                         ifelse(CB4H==1, 1, 0))))) %>% 
  mutate(tef_freq = ifelse(CF4A == 1,4,
                           ifelse(CF4D == 1,3,
                                  ifelse(CF4F ==1, 2,
                                         ifelse(CF4H==1, 1, 0))))) %>% 
  mutate(car_freq = ifelse(CG4A == 1,4,
                           ifelse(CG4D == 1,3,
                                  ifelse(CG4F ==1, 2,
                                         ifelse(CG4H==1, 1, 0))))) %>% 
  mutate(for_freq = ifelse(CH4A == 1,4,
                           ifelse(CH4D == 1,3,
                                  ifelse(CH4F ==1, 2,
                                         ifelse(CH4H==1, 1, 0))))) %>% 
  mutate(swi_freq = ifelse(CI4A == 1,4,
                           ifelse(CI4D == 1,3,
                                  ifelse(CI4F ==1, 2,
                                         ifelse(CI4H==1, 1, 0)))))
```

## Drug dealer identity

```{r}
win3_w1w2_sp <- win3_w1w2_sp %>% 
  mutate(C28D = ifelse(C28D == "1",1,
                       ifelse(C28D == "0",0,NA))) %>% 
  mutate(across(c(C28D), as.numeric))
```

## Length of window period 3 (WP3)

```{r}
win3_w1w2_sp <- win3_w1w2_sp %>% 
  mutate(across(c(C9), as.integer)) %>% 
  mutate(set_length = C9 + 1) %>% 
  mutate(set_length_ran = ifelse(set_length>=1 & set_length<=6,1,
                                        ifelse(set_length>=7 & set_length<=12,2,
                                               ifelse(set_length>=13 & set_length<=18,3,
                                                      ifelse(set_length>=19,4,NA)))))
```

## No. of crime types

```{r}
win3_w1w2_sp <- win3_w1w2_sp %>% 
  mutate(across(c(CA1, CB1,CC1,CF1,CG1,CH1, CI1), 
                ~ ifelse(.x %in% c("2","4"), 0,
                         ifelse(.x %in% c("1","3"), 1, NA))))
```

## No. of arrest for drug dealing

```{r}
win3_w1w2_sp <- win3_w1w2_sp %>% 
  mutate(across(c(CJ5), ~ recode(.x, "AB"="1.5", "MM"=""))) %>% 
  mutate(across(c(CJ5), as.numeric))
```

## Criminal subjective and psychological information

```{r}

win3_w1w2_sp <- win3_w1w2_sp %>% 
  as_tibble() %>% 
  mutate(across(c(B1A, B1B, B1C, B1D, B1E, B1F, B1H, B1I, B1J, B1L, B1M, B1N, B1O, B1P), 
                ~ recode(.x, "T"="","1"="4", "2"="3", "3"="2","4"="1"))) %>% 
  haven::zap_labels() %>% 
 mutate(across(c(B1A, B1B, B1C, B1D, B1E, B1F,B1G, B1H, B1I, B1J, B1K, B1L, B1M, B1N, B1O, B1P), as.numeric))
```

## Perceived crime benefit and cost from crime activity and non-crime activity

```{r}
win3_w1w2_sp <- win3_w1w2_sp %>%
  mutate(across(c(starts_with("B2"), starts_with("B5")),
              ~ ifelse(.x == "1",1,
                       ifelse(.x == "2",2,
                              ifelse(.x=="3",3,
                                     ifelse(.x=="4",4,
                                            ifelse(.x=="5",5,NA))))))) %>% 
  mutate(across(c(B3,B4,B6, B7),
              ~ ifelse(.x == "1",5,
                       ifelse(.x == "2",4,
                              ifelse(.x=="3",3,
                                     ifelse(.x=="4",2,
                                            ifelse(.x=="5",1,NA)))))))
```

## Criminal self-efficacy

```{r}
win3_w1w2_sp <- win3_w1w2_sp %>%
  mutate(B8 = ifelse(B8 == "1",4,
                     ifelse(B8 == "2", 3,
                            ifelse(B8 == "3", 2,
                                   ifelse(B8 == "4",1,NA)))))
```

## Future offending and Arrest avoidance

```{r}
win3_w1w2_sp <- win3_w1w2_sp %>% 
  mutate(CK8 = ifelse(CK8 == 1, 1,
                      ifelse(CK8 == 2 | CK8 == 4, 2, NA))) %>%
  haven::zap_labels() %>% 
  mutate(across(c(B9, B10, B11, CK8), as.integer)) %>% #1= cannot avoidï¼Œ2= can avoid
  mutate(across(c(B9, B10, B11),
                ~ case_when(.x == 0 ~ 10,
                            .x == 10 ~ 9,
                            .x == 20 ~ 8.5,
                            .x == 30 ~ 8,
                            .x == 40 ~ 7.5,
                            .x == 45 ~ 7,
                            .x == 50 ~ 6,
                            .x == 60 ~ 5,
                            .x == 70 ~ 4.5,
                            .x == 75 ~ 4,
                            .x == 80 ~ 3,
                            .x == 85 ~ 2,
                            .x == 90 ~ 1,
                            .x == 100 ~ 0)))
```

## Tools bringing in non-violent property crime

```{r}

win3_w1w2_sp <- win3_w1w2_sp %>% 
  mutate(across(c(CA7, CB6, CC6),
                ~ recode(.x, "M"=""))) %>% 
  mutate(across(c(CK9A, CK10),
                ~ recode(.x, "T"=""))) %>% 
  mutate(across(c(CA7, CB6, CC6, CK9A, CK10),as.integer))

win3_w1w2_sp <- win3_w1w2_sp %>% mutate(across(c(CK9A, CK10),
               ~ ifelse(.x == 1, 1,
                       ifelse(.x == 2 | .x == 4, 2, NA))))
```

## Hurting others in non-violent property crime

```{r}
win3_w1w2_sp <- win3_w1w2_sp %>% 
  mutate(CD1 = ifelse(CD1 %in% c("2","4"), 0, 
                      ifelse(CD1 %in% c("1","3"), 1, NA))) %>%
  mutate(across(c(CD2), as.integer)) %>% 
  mutate(across(c(CD3A),
                ~ ifelse(.x == "1",1,
                         ifelse(.x == "M", NA, 2)))) %>% 
  mutate(across(c(CD4),
                ~ ifelse(.x == "1",2,
                         ifelse(.x=="2", 1, NA))))
```

## Hurting others in violent crime

```{r}

win3_w1w2_sp <- win3_w1w2_sp %>% 
  mutate(across(c(CE5, CE7),
                ~ recode(.x, "M"=""))) %>% 
  mutate(CE7 = ifelse(CE7 %in% c("2","4"), 1, 
                      ifelse(CE7 %in% c("1", "3"), 2, NA))) %>% 
  mutate(CE1 = ifelse(CE1 %in% c("2","4"), 0, 
                      ifelse(CE1 %in% c("1","3"), 1, NA))) %>%
  mutate(across(c(CE4), ~ recode(.x, "MM"=""))) %>% 
  mutate(across(c(CE7A), ~ recode(.x, "YY"=""))) %>% 
  mutate(across(c(CE2, CE3, CE7A), ~ recode(.x, "94"="3", "96"="10"))) %>% 
  mutate(across(c(CE1, CE2, CE3, CE4, CE5, CE7, CE7A), as.integer))

```

## Crime strategy in property crime

```{r}
win3_w1w2_sp <- win3_w1w2_sp %>% 
  mutate(across(c(CK5A, CK5B, CK5C, CK5D, CK5E, CK5F, CK5G, CK5H, CK5I, CK5J, CK5K, CK5L), 
                ~recode(.x, "Y"="","T"=""))) %>% 
  mutate(CK5 = ifelse(CK5 %in% c("1","4"), 2,
                      ifelse(CK5 %in% c("2","3"), 1, NA))) %>% 
  mutate(across(c(CK5, CK5A, CK5B, CK5C, CK5D, CK5E, CK5F, CK5G, CK5H, CK5I, CK5J, CK5K, CK5L), as.integer)) %>% 
  mutate(across(c(CK5A, CK5B, CK5C, CK5D, CK5E, CK5F, CK5G, CK5H, CK5I, CK5J, CK5K, CK5L), 
                ~ replace_na(.x, 0))) %>% 
  mutate(across(c(CK5), factor))

```

## Charges of drug dealing for current incaceration

```{r}
win3_w1w2_sp <- win3_w1w2_sp %>% 
  mutate(CK6E = ifelse(CK6E=="0",0,
                       ifelse(CK6E=="1",1,NA)))
```

## Demographic variables

### Age, race, education, marriage

```{r}
win3_w1w2_sp <- win3_w1w2_sp %>% 
  mutate(across(c(E1, E2, E3, E4),
                ~ recode(.x, "T"=""))) %>% 
  mutate(across(c(E1,E2,E4,E3), as.integer)) %>% 
  mutate(across(c(E2,E4), factor)) %>% 
  mutate(E2_bina = ifelse(E2=="5", 1, 0)) %>% 
  mutate(E4_bina = ifelse(E4=="1", 1, 0))

```

### Drug use in WP3

```{r}
win3_w1w2_sp <- win3_w1w2_sp %>% 
  mutate(across(c(C23),
                ~ ifelse(C23 %in% c("2","4"),"1",
                        ifelse(C23 %in% c("1","3"),"2","")))) %>% 
  mutate(across(c(C23),as.integer)) %>% 
  mutate(across(c(C24),
                ~ recode(.x, "0"=0,"5"=1,"4"=2,"3"=3,"2"=4,"1"=5)))

```

### Crime income

```{r}
win3_w1w2_sp <- win3_w1w2_sp %>% 
  mutate(across(c(CK2),
                ~ recode(.x, "T"=""))) %>% 
  mutate(across(c(CK3),
                ~ recode(.x, "9996"="", "9998"=""))) %>% 
  mutate(across(c(CK2,CK3), as.numeric)) 

```

### Length of sentence for current incarceration

```{r}
win3_w1w2_sp <- win3_w1w2_sp %>% 
  mutate(across(c(A14, A15, A17),
                ~ recode(.x, "T"=""))) %>% 
  mutate(across(c(A14, A15, A17, CK12YR,CK12MO,CK13YR,CK13MO), as.numeric)) %>% 
  mutate(serve_sen = CK12YR*12+CK12MO, na.rm=TRUE) %>% 
  mutate(left_sen = CK13YR*12+CK13MO, na.rm=TRUE)

```

### Employment during WP1, WP2, WP3

```{r}
win3_w1w2_sp <- win3_w1w2_sp %>% 
  mutate(across(c(C17), ~recode(.x, "T"=""))) %>% 
  mutate(across(c(C17, D7, D16),as.integer)) %>% 
  mutate(across(c(C17, D7, D16), ~ recode(.x, "2"=1,"1"=2)))

```

### Select items and compute for  demo statistics v
```{r}

# select items for each variable
nonvio_crime_diverse <- c("CA1","CB1","CC1","CF1","CG1","CH1", "CI1")
vio_crime_diverse <- c("CD1","CE1")
crime_diverse <- c("CA1","CB1","CC1","CD1","CE1","CF1","CG1","CH1", "CI1")

# compute each variable by sum or mean
var_compute <- win3_w1w2_sp %>% 
  mutate(nviocr_diver = rowSums(select_at(., nonvio_crime_diverse),na.rm = TRUE)) %>% 
  mutate(viocr_diver = rowSums(select_at(., vio_crime_diverse),na.rm = TRUE)) %>% 
  mutate(cr_diver = rowSums(select_at(., crime_diverse),na.rm = TRUE)) %>% 

```

### Table 1. Demographic statistics for drug dealer sample

```{r}

demo_data <- var_compute %>% 
  select(E1,#age
         E2,#race
         E3,#education
         E4,#married
         continuity_drcr, drug_freq, C28D,CK6E, CJ5, #related to drug dealing
         cr_diver,nviocr_diver, viocr_diver, #related to the crime types
         set_length) %>%
  mutate(across(c(E3, continuity_drcr, C28D, CK6E), factor)) %>% 
  mutate(E2 = recode(E2,
                     `1` = "Asian",
                     `2` = "Black",
                     `3` = "Chicano/Latino",
                     `4` = "Indian/Native American",
                     `5` = "White",
                     `6` = "Other")) %>% 
  mutate(E3 = recode(E3,
                     `0` = "No schooling",
                     `1` = "6th grade or less",
                     `2` = "7th - 9th grade",
                     `3` = "10th - 11th grade",
                     `4` = "High school grade",
                     `5` = "Some college",
                     `6` = "College graduate",
                     `7` = "Post graduate study")) %>% 
  mutate(E4 = recode(E4,
                     `1` = "Married",
                     `2` = "Widowed",
                     `3` = "Divorced",
                     `4` = "Separated",
                     `5` = "Never married")) %>% 
  mutate(continuity_drcr = recode(continuity_drcr,
                                `1` = "commited drug crime in WP3 only",
                                `2` = "commited drug crime in WP3 and WP2 or WP1",
                                `3` = "commited drug crime in WP3, WP2 and WP1")) %>% 
  mutate(C28D = recode(C28D,`0` = "No", `1` = "Yes")) %>% 
  mutate(CK6E = recode(CK6E,`0` = "No", `1` = "Yes"))

#demo_table <- tbl_summary(demo_data,
 #                         statistic = list(all_continuous() ~ "{mean} ({sd}) {min}, {max}, {median} ({p25}, {p75})", 
  #                                         all_categorical() ~ "{n} / {N} ({p}%)"),
   #                       digits = all_continuous() ~ 2,
    #                      label = list(E1 ~ "Age",
     #                                  E2 ~ "Race",
      #                                 E3 ~ "Education",
       #                                E4 ~ "Marrige",
        #                               continuity_drcr ~ "Continuity on drug dealing",
         #                              drug_freq ~ "Frequency of drug dealing",
          #                             C28D ~ "Drug dealer identity",
           #                            CK6E ~  "Incaceration for drug dealing",
            #                           CJ5 ~ "No. of arrested for drug dealing",
             #                          cr_diver ~ "No. of types of crime commited",
              #                         nviocr_diver ~ "No. of types of property crime commited" ,
               #                        viocr_diver ~ "No. of types of violent crime commited",
                #                       set_length ~ "Length of WP3 (month)"),
                 #         missing_text = "(Missing)")
#demo_table         
labs <- c("Age","Race", "Education","Marrige","Experience in drug dealing","Frequency of drug dealing","Self-identity as a drug dealer","Current incaceration for drug dealing","No. of arrest for drug dealing","No. of crime types","No. of property crime types" ,"No. of violent crime types","Length of WP3 (month)")
table_1 <- sumtable(demo_data, labels = labs)  # Table 1  

```


## Factor analysis

### Exploratory factor analysis (EFA)

```{r}
# EFA for criminl thinking 
efa_data_ct <- win3_w1w2_sp %>% 
  select(B1A, B1I, #B1N, #ct_mo
         B1D, B1E, B1P,B1J, B1M, #B1O,#ct_en
         B1K, B1G, B1C,#ct_so
         )

library(parameters)
library(psych)

check_factorstructure(efa_data_ct)
#> Is the data suitable for Factor Analysis?
#> KMO: The Kaiser, Meyer, Olkin (KMO) measure of sampling adequacy suggests that data seems appropriate for factor analysis (KMO = 0.66).
#> Sphericity: Bartlett's test of sphericity suggests that there is sufficient significant correlation in the data for factor analysis (Chisq(55) = 789.28, p < .001).

number_items <- fa.parallel(efa_data_ct, #data frame
                            fm="pa", #math
                            fa="fa") #only efa

efa_fit_ct <- psych::fa(efa_data_ct,
                    nfactors =3,
                    rotate = "promax", #promax
                    fm = "pa") #Principal Axis Factor Analysis
efa_ct <- efa_fit_ct %>% 
  model_parameters(sort = TRUE, threshold = "max")
efa_ct
#> The 3 latent factors (promax rotation) accounted for 28.99% of the total variance of the original data (PA1 = 10.47%, PA3 = 10.05%, PA2 = 8.48%).
library(gt)
efa_ct %>% 
  gt() %>% 
  gtsave(filename = "efa_ct.rtf")

#* Plots of the results
# The built in plot functions from psych are fantastic!
fa.plot(efa_fit_ct, 
        labels = colnames(efa_data_ct))
fa.diagram(efa_fit_ct) 

```

### Confirmatory factor analysis (CFA)

```{r}
cfa_dataset <- win3_w1w2_sp %>% 
  select(B1A, B1I, #ct_mo
         B1D, B1E, B1P,B1J, B1M, #ct_en
         B1K, B1G, B1C,#ct_so
         B2A, B2C, B2E, B2G,B2I,B2K,B2M, B2O, #pcb
         CK5A, CK5B, CK5C, CK5D, CK5E, CK5F, CK5G, CK5H, CK5I,CK5J, CK5K, CK5L, #cs,
         B8, 
         B9, 
         CK8
         )
```

#### CFA for measurement model

##### CFA for CT

```{r}
# First order CFA
ct.model_1f <- '
ct_mo  =~ B1A + B1I
ct_en =~ B1D + B1E + B1P + B1J
# + B1M
ct_so =~ B1K + B1G + B1C
ct_mo ~~ ct_en
ct_mo ~~ ct_so
ct_en ~~ ct_so
'   

# fit the model 
ct.fit_1f <- cfa(ct.model_1f, data = cfa_dataset, estimator = "MLR")
summary(ct.fit_1f, fit.measures = TRUE,
         standardized = TRUE, rsq = TRUE)

# modification indices
ct.modi_1f <- modindices(ct.fit_1f, sort = TRUE)
ct.modi_1f[ct.modi_1f$op == "~~",]

# diagram the model
library(semPlot)
semPaths(ct.fit_1f, 
         whatLabels = "std", 
         layout = "tree",
         edge.label.cex = 1)
# Calculating the reliability coefficients (with semTools).
library(semTools)
semTools::reliability (ct.fit_1f)
```

```{r}
# Second  order CFA

ct.model_2n <- '
ct_mo  =~ B1A + B1I
ct_en =~ B1D + B1E + B1P + B1J
ct_so =~ B1K + B1G + B1C

ct =~ ct_mo + ct_en + ct_so
'   

# fit the model 
ct.fit_2n <- cfa(ct.model_2n, data = cfa_dataset, estimator = "MLR")
summary(ct.fit_2n, fit.measures = TRUE,
         standardized = TRUE, rsq = TRUE)

# modification indices
ct.modi_2n <- modindices(ct.fit_2n, sort = TRUE)
ct.modi_2n[ct.modi_2n$op == "~~",]

# diagram the model
library(semPlot)
semPaths(ct.fit_2n, 
         whatLabels = "std", 
         layout = "tree",
         edge.label.cex = 1)
# Calculating the reliability coefficients (with semTools).
library(semTools)
semTools::reliability (ct.fit_2n)
```

##### CFA for PCB

```{r}
pcb.model <- '
pcb =~ B2C+ B2E + B2G  + B2K + B2A+ B2I + B2O

B2E ~~ B2G
B2I	~~	B2O
#B2K	~~	B2A

# B2E + B2G + B2I + B2K 
'    

# fit the model 
pcb.fit <- cfa(pcb.model, data = cfa_dataset, estimator = "MLR")
summary(pcb.fit, fit.measures = TRUE,
         standardized = TRUE, rsq = TRUE)

# modification indices
pcb.modi <- modindices(pcb.fit, sort = TRUE)
pcb.modi[pcb.modi$op == "~~",]

# diagram the model
library(semPlot)
semPaths(pcb.fit, 
         whatLabels = "std", 
         layout = "tree",
         edge.label.cex = 1)
# Calculating the reliability coefficients (with semTools).
library(semTools)
semTools::reliability(pcb.fit)
```

##### CFA for CS

```{r}
cs.model <- '
cs =~ CK5A + CK5B  + CK5E + CK5F + CK5G + CK5H + CK5I +CK5J + CK5K + CK5L
# +  loading
# + CK5C modi
'   

# fit the model 
cs.fit <- cfa(cs.model, data = cfa_dataset, estimator = "MLR")
summary(cs.fit, fit.measures = TRUE,
         standardized = TRUE, rsq = TRUE)

# modification indices
cs.modi <- modindices(cs.fit, sort = TRUE)
cs.modi[cs.modi$op == "~~",]

# diagram the model
library(semPlot)
semPaths(cs.fit, 
         whatLabels = "std", 
         layout = "tree",
         edge.label.cex = 1)
# Calculating the reliability coefficients (with semTools).
library(semTools)
semTools::reliability(cs.fit)
```

##### Construct for FO, CSE ,AA

```{r}
##### variance
var(win3_w1w2_sp$B9, na.rm = TRUE) # 7.97 *0.3 = 2.39
var(win3_w1w2_sp$B8, na.rm = TRUE) # 0.73 *0.3 = 0.22
var(win3_w1w2_sp$CK8, na.rm = TRUE) # 0.25 *0.3 = 0.075
# test-retest reliability is set to 0.7
# hence

# FO 
fo.model <- '
fo =~ 1*B9
B9 ~~ 2.39*B9
## error variance associated with B9 fixed, a priori (here Var Îµ = 7.97).
'
#CSE
cse.mode <- '
cse =~ 1*B8
B8 ~~ 0.22*B8
## error variance associated with B9 fixed, a priori (here Var Îµ = 0.73).
'

#AA
aa.model <- '
aa =~ 1*CK8
CK8 ~~ 0.075*CK8
## error variance associated with B9 fixed, a priori (here Var Îµ = 0.25).
'

```

#### CFA for structure model

```{r}
cfa_struct <- '
ct_mo  =~ B1A + B1I
ct_en =~ B1D + B1E + B1P + B1J
ct_so =~ B1K + B1G + B1C
ct =~ ct_mo + ct_en + ct_so

pcb =~ B2C+ B2E + B2G  + B2K + B2A+ B2I + B2O
B2E ~~ B2G
B2I	~~	B2O

cs =~ CK5A + CK5B  + CK5E + CK5F + CK5G + CK5H + CK5I +CK5J + CK5K + CK5L

fo =~ 1*B9
B9 ~~ 2.39*B9

cse =~ 1*B8
B8 ~~ 0.22*B8


aa =~ 1*CK8
CK8 ~~ 0.075*CK8

ct ~~ pcb
ct ~~ cs
ct ~~ fo
ct ~~ cse
ct ~~ aa
pcb ~~ cs
pcb ~~ fo
pcb ~~ cse
pcb ~~ aa
cs ~~ fo
cs ~~ cse
cs ~~ aa
'

# fit the model 
cfa_struct.fit <- cfa(cfa_struct, data = cfa_dataset, estimator = "MLR")
summary(cfa_struct.fit, fit.measures = TRUE,
         standardized = TRUE, rsq = TRUE)

# modification indices
cfa_struct.modi <- modindices(cfa_struct.fit, sort = TRUE)
cfa_struct.modi[cfa_struct.modi$op == "~~",]

# diagram the model
library(semPlot)
semPaths(cfa_struct.fit, 
         whatLabels = "std", 
         layout = "tree",
         edge.label.cex = 1)
# Calculating the reliability coefficients (with semTools).
library(semTools)
semTools::reliability(cfa_struct.fit)
```

## PATH analysis - mediation

### data prepartion

```{r}
path_dataset <- win3_w1w2_sp

```

### Outcome var = Future offendsng

```{r}
#variance of FO
var(win3_w1w2_sp$B9,na.rm=TRUE)
# Variance of the error associated = 7.970634*0. = 2.39

path.model_FO <- '
ct_mo  =~ B1A + B1I
ct_en =~ B1D + B1E + B1P + B1J
ct_so =~ B1K + B1G
CT =~ ct_mo + ct_en +ct_so


PCB =~ B2C+ B2E + B2G  + B2K + B2A+ B2I + B2O
B2E ~~ B2G
B2I	~~	B2O

FO =~ 1*B9
B9 ~~ 2.39*B9
## error variance associated with B9 fixed, a priori (here Var Îµ = 7.97).

CT ~ a*PCB + E1 + E3 + E2_bina + E4_bina + set_length_ran + C28D + CJ5 
FO ~ c*PCB + b*CT + E1 + E3 + E2_bina + E4_bina + set_length_ran + C28D + CJ5


# total effect
total := c + a*b
# direct effect (c)
direct := c
# indirect effect (a*b)
indirect := a*b
'

path.model_FO.est <- lavaan::sem(path.model_FO, data = path_dataset, estimator = "MLMVS")#, test = "bootstrap", bootstrap=1000) #meanstructure=TRUE)
summary(path.model_FO.est, fit.measures = TRUE, standardized = TRUE, rsq = TRUE)
parameterEstimates(path.model_FO.est, level = 0.95, boot.ci.type = "bca.simple", output = "text")

library(semptools)
plot_med <- semPaths(path.model_FO.est, rotation=2,
         sizeMan=6, sizeLat = 10, 
         sizeMan2=4, sizeLat2 =8,
         shapeLat = "ellipse",shapeInt = "triangle",
         curvePivot=TRUE, edge.color="black",
         whatLabels = "std",
         edge.label.cex = 0.8,
         nCharNodes = 4,
         groups = "latents", pastel = TRUE,
         intercepts = TRUE,
         mar = c(1, 3, 1, 3),
         #layout = m, 
         optimizeLatRes = TRUE,residuals =FALSE,
         edge.label.position = 0.65) %>% 
  mark_sig(path.model_FO.est, alpha = c("(n.s.)" = 1.00, "*" = .05, "**" = .01, "***" = .001))
plot(plot_med)
#> å®Œå…¨ä¸­ä»‹
```

### Outcome var = Crima self-effeicacy

```{r}
#variance of FO
var(win3_w1w2_sp$B8,na.rm=TRUE)
# Variance of the error associated = 0.7378*0.3 = 0.22

path.model_CSE <- '
ct_mo  =~ B1A + B1I
ct_en =~ B1D + B1E + B1P + B1J
ct_so =~ B1K + B1C + B1G
CT =~ ct_mo + ct_en +ct_so

PCB =~ B2C+ B2E + B2G  + B2K + B2A+ B2I + B2O
B2E ~~ B2G
B2I	~~	B2O 

CSE =~ 1*B8
B8 ~~ 0.22*B8
## error variance associated with B9 fixed, a priori (here Var Îµ = 0.73).

# adding controls in a and b paths, not c path
# direct
CSE ~ c*PCB
#mediator
CT ~ a*PCB + E1 + E3 + E2_bina + E4_bina + set_length_ran + C28D + CJ5

CSE ~ b*CT + E1 + E3 + E2_bina + E4_bina + set_length_ran + C28D + CJ5

# total effect
total := c + a*b
# direct effect (c)
direct := c
# indirect effect (a*b)
indirect := a*b
'

path.model_CSE.est <- lavaan::sem(path.model_CSE, data = path_dataset, estimator = "MLR")#, test = "bootstrap", bootstrap=1000) #meanstructure=TRUE)
summary(path.model_CSE.est, fit.measures = TRUE, standardized = TRUE, rsq = TRUE)
parameterEstimates(path.model_CSE.est, level = 0.95, boot.ci.type = "bca.simple", output = "text")

library(semptools)
plot_med <- semPaths(path.model_CSE.est, rotation=2,
         sizeMan=6, sizeLat = 10, 
         sizeMan2=4, sizeLat2 =8,
         shapeLat = "ellipse",shapeInt = "triangle",
         curvePivot=TRUE, edge.color="black",
         whatLabels = "std",
         edge.label.cex = 0.8,
         nCharNodes = 4,
         groups = "latents", pastel = TRUE,
         intercepts = TRUE,
         mar = c(1, 3, 1, 3),
         #layout = m, 
         optimizeLatRes = TRUE,residuals =FALSE,
         edge.label.position = 0.65) %>% 
  mark_sig(path.model_CSE.est, alpha = c("(n.s.)" = 1.00, "*" = .05, "**" = .01, "***" = .001))
plot(plot_med)
#> å®Œå…¨ä¸­ä»‹
path.model_CSE.modi <- modindices(path.model_CSE.est, sort = TRUE)
path.model_CSE.modi[path.model_CSE.modi$op == "~~",]
```

### Outcome var = Arrest avoid

```{r}
#variance of FO
var(win3_w1w2_sp$CK8,na.rm=TRUE)
# Variance of the error associated = 0.249*0.3 = 0.07

path.model_AA <- '
ct_mo  =~ B1A + B1I
ct_en =~ B1D + B1E + B1P + B1J
ct_so =~ B1K + B1C + B1G
CT =~ ct_mo + ct_en +ct_so
#B1K	~~	B1G

PCB =~ B2C+ B2E + B2G  + B2K + B2A+ B2I + B2O
B2E ~~ B2G
B2I	~~ B2O 

CSE =~ 1*B8
B8 ~~ 0.22*B8

AA =~ 1*CK8
CK8 ~~ 0.075*CK8

# adding controls in a and b paths
# direct
AA ~ c*PCB

#mediator
CT ~ a*PCB + E1 + E3 + E2_bina + E4_bina + set_length_ran + C28D + CJ5

CSE ~ b*CT + E1 + E3 + E2_bina + E4_bina + set_length_ran + C28D + CJ5

AA ~ d*CSE + E1 + E3 + E2_bina + E4_bina + set_length_ran + C28D + CJ5

# total effect
total := c + a*b*d
# direct effect (c)
direct := c
# indirect effect (a*b)
indirect := a*b*d
'

path.model_AA.est <- lavaan::sem(path.model_AA, data =path_dataset, estimator = "MLR")#, test = "bootstrap", bootstrap=1000) #meanstructure=TRUE)
summary(path.model_AA.est, fit.measures = TRUE, standardized = TRUE, rsq = TRUE)
parameterEstimates(path.model_AA.est, level = 0.95, boot.ci.type = "bca.simple", output = "text")

library(semptools)
plot_med <- semPaths(path.model_AA.est, rotation=2,
         sizeMan=6, sizeLat = 10, 
         sizeMan2=4, sizeLat2 =8,
         shapeLat = "ellipse",shapeInt = "triangle",
         curvePivot=TRUE, edge.color="black",
         whatLabels = "std",
         edge.label.cex = 0.8,
         nCharNodes = 4,
         groups = "latents", pastel = TRUE,
         intercepts = TRUE,
         mar = c(1, 3, 1, 3),
         #layout = m, 
         optimizeLatRes = TRUE,residuals =FALSE,
         edge.label.position = 0.65) %>% 
  mark_sig(path.model_CSE.est, alpha = c("(n.s.)" = 1.00, "*" = .05, "**" = .01, "***" = .001))
plot(plot_med)
#> å®Œå…¨ä¸­ä»‹
path.model_AA.modi <- modindices(path.model_AA.est, sort = TRUE)
path.model_AA.modi[path.model_AA.modi$op == "~~",]
```

## PATH analysis - meoderatied mediation

```{r}
# select items for each variable
criminal_thinking <- c("B1A", "B1I","B1D", "B1E","B1P", "B1J", "B1C","B1G","B1K")
perceived_benefit_cr <- c("B2C", "B2E","B2G","B2K","B2A","B2I","B2O")
crime_strategy <- c("CK5A", "CK5B", "CK5E", "CK5F", "CK5G", "CK5H", "CK5I", "CK5J", "CK5K", "CK5L")

# compute each variable by sum or mean
memo_dataset <- win3_w1w2_sp %>% 
 mutate(cr_thinking = rowMeans(select_at(., criminal_thinking),na.rm = TRUE)) %>%
 mutate(perce_cr_benefit = rowSums(select_at(., perceived_benefit_cr), na.rm = TRUE)) %>% 
 mutate(cr_strategy = rowMeans(select_at(., crime_strategy), na.rm = TRUE))

```

### interaction term

##### step 1 & 2

```{r}

#### crime strategy and perceived crime benefit are both deemed as a item for computing the interaction term

# step 1
# cr_strategy * perceived crime benefit
memo_dataset$term <- memo_dataset$cr_strategy * memo_dataset$perce_cr_benefit
memo_dataset$res <- resid(lm(term ~ cr_strategy + perce_cr_benefit, data = memo_dataset, na.action = na.exclude))
memo_dataset$res
```

##### data split

```{r}
memo1_dataset <- memo_dataset %>% 
  filter(continuity_drcr==1)
memo12_dataset <- memo_dataset %>% 
  filter(continuity_drcr<3)
memo23_dataset <- memo_dataset %>% 
  filter(continuity_drcr>1)
memo2_dataset <- memo_dataset %>% 
  filter(continuity_drcr==2)
memo3_dataset <- memo_dataset %>% 
  filter(continuity_drcr==3)
describe(memo_dataset$cr_strategy) 
#> mean = 0.82	sd = 0.76
describe(memo1_dataset$cr_strategy) 
#> 0.66	0.72
describe(memo2_dataset$cr_strategy)
#> 0.88	0.78	


```

##### variance

```{r}
#var(memo_dataset$perce_cr_benefit,na.rm=TRUE) # 47.84 *0.3=14.35
#var(memo_dataset$cr_strategy, na.rm = TRUE) # 0.577 *0.3 = 0.17
var(memo_dataset$res, na.rm = TRUE) # 23.30 *0.3 = 6.99
var(memo12_dataset$res, na.rm = TRUE) #22.01 *0.3 = 6.60
var(memo3_dataset$res, na.rm = TRUE)  # 25.03 * 0.3 = 7.51

var(memo_dataset$B9, na.rm = TRUE) # 7.97 *0.3 = 2.39
var(memo12_dataset$B9, na.rm = TRUE) # 7.53  *0.3 = 2.25
var(memo3_dataset$B9, na.rm = TRUE)  # 8.35 * 0.3 = 2.51

var(memo_dataset$B8, na.rm = TRUE) # 0.73 *0.3 = 0.22
var(memo12_dataset$B8, na.rm = TRUE) # 0.78 *0.3 = 0.23
var(memo3_dataset$B8, na.rm = TRUE)  # 0.66 * 0.3 = 0.20

var(memo_dataset$CK8, na.rm = TRUE) # 0.25 *0.3 = 0.075
var(memo12_dataset$CK8, na.rm = TRUE) # 0.25 *0.3 = 0.075
var(memo3_dataset$CK8, na.rm = TRUE)  # 0.24 * 0.3 = 0.07
```

##### moderation - FO

```{r}
memo_FO.model <- '
ct_mo  =~ B1A + B1I
ct_en =~ B1D + B1E + B1P + B1J
ct_so =~ B1K + B1C + B1G
CT =~ ct_mo + ct_en +ct_so
#B1K	~~ B1G


PCB =~ B2C+ B2E + B2G  + B2K + B2A+ B2I + B2O
B2E ~~ B2G
B2I	~~	B2O

FO =~ 1*B9
B9 ~~ 2.39*B9
#B9 ~~ 2.25*B9
#B9 ~~ 2.51*B9


CS =~ CK5A + CK5B  + CK5E + CK5F + CK5G + CK5H + CK5I +CK5J + CK5K + CK5L
   
PRTRM =~ res
res ~~ 6.99*res
#res ~~ 6.60*res
#res ~~ 7.51*res

         
PRTRM ~~ 0*PCB
PRTRM ~~ 0*CS

CT ~ a*PCB + e*CS + mod * PRTRM + E1 + E3 + E2_bina + E4_bina + set_length_ran + C28D + CJ5 
FO ~ c*PCB + b*CT + E1 + E3 + E2_bina + E4_bina + set_length_ran + C28D + CJ5


#conditional indirect effects

# all sample
ind_L := (a + mod*(0.82-0.76)) * b
ind_M := (a + mod* 0.82) * b
ind_H := (a + mod*(0.82 + 0.76)) * b


# less-experienced group
#ind_L := (a + mod*(0.66-0.72)) * b
#ind_M := (a + mod* 0.66) * b
#ind_H := (a + mod*(0.66 + 0.72)) * b

# experienced group
#ind_L := (a + mod*(0.88-0.78)) * b
#ind_M := (a + mod* 0.88) * b
#ind_H := (a + mod*(0.88 + 0.78)) * b

#index of moderated mediation
IMM := mod * b
'
memo_FO.est <- lavaan::sem(memo_FO.model, data = memo_dataset, estimator = "WLSMV")
summary(memo_FO.est, fit.measures = TRUE, standardized = TRUE, rsq = TRUE)

parameterEstimates(memo_FO.est, level = 0.95, boot.ci.type = "bca.simple", output = "text")

library(semptools)
plot_med <- semPaths(memo_FO.est, rotation=2,
         sizeMan=6, sizeLat = 10, 
         sizeMan2=4, sizeLat2 =8,
         shapeLat = "ellipse",shapeInt = "triangle",
         curvePivot=TRUE, edge.color="black",
         whatLabels = "std",
         edge.label.cex = 0.8,
         nCharNodes = 4,
         groups = "latents", pastel = TRUE,
         intercepts = FALSE,
         mar = c(1, 3, 1, 3),
         #layout = m, 
         optimizeLatRes = TRUE,residuals =FALSE,
         edge.label.position = 0.65) %>% 
  mark_sig(memo_FO.est, alpha = c("(n.s.)" = 1.00, "*" = .05, "**" = .01, "***" = .001))
plot(plot_med)
        

```

##### moderation - CSE

```{r}
memo_CSE.model <- '
ct_mo  =~ B1A + B1I
ct_en =~ B1D + B1E + B1P + B1J
ct_so =~ B1K + B1C + B1G
CT =~ ct_mo + ct_en +ct_so
#B1K	~~	B1G


PCB =~ B2C+ B2E + B2G  + B2K + B2A+ B2I + B2O
B2E ~~ B2G
B2I	~~	B2O 

CSE =~ 1*B8
#B8 ~~ 0.22*B8
#B8 ~~ 0.23*B8
B8 ~~ 0.2*B8

CS =~ CK5A + CK5B  + CK5E + CK5F + CK5G + CK5H + CK5I +CK5J + CK5K + CK5L
   
PRTRM =~ res
#res ~~ 6.99*res
#res ~~ 6.60*res
res ~~ 7.51*res

PRTRM ~~ 0*PCB
PRTRM ~~ 0*CS


CT ~ a*PCB + e*CS + mod * PRTRM + E1 + E3 + E2_bina + E4_bina + set_length_ran + C28D + CJ5
CSE ~ c*PCB + b*CT + E1 + E3 + E2_bina + E4_bina + set_length_ran + C28D + CJ5

#conditional indirect effects
# all sample
#ind_L := (a + mod*(0.82-0.76)) * b
#ind_M := (a + mod* 0.82) * b
#ind_H := (a + mod*(0.82 + 0.76)) * b


# less-experienced group
#ind_L := (a + mod*(0.66-0.72)) * b
#ind_M := (a + mod* 0.66) * b
#ind_H := (a + mod*(0.66 + 0.72)) * b

# experienced group
ind_L := (a + mod*(0.88-0.78)) * b
ind_M := (a + mod* 0.88) * b
ind_H := (a + mod*(0.88 + 0.78)) * b


#index of moderated mediation
IMM := mod * b
'
memo_CSE.est <- lavaan::sem(memo_CSE.model, data = memo3_dataset, estimator = "WLSMV")              
summary(memo_CSE.est, fit.measures = TRUE, standardized = TRUE, rsq = TRUE)
parameterEstimates(memo_CSE.est, level = 0.95, boot.ci.type = "bca.simple", output = "text")


library(semptools)
plot_med <- semPaths(memo_CSE.est, rotation=2,
         sizeMan=6, sizeLat = 10, 
         sizeMan2=4, sizeLat2 =8,
         shapeLat = "ellipse",shapeInt = "triangle",
         curvePivot=TRUE, edge.color="black",
         whatLabels = "std",
         edge.label.cex = 0.8,
         nCharNodes = 4,
         groups = "latents", pastel = TRUE,
         intercepts = FALSE,
         mar = c(1, 3, 1, 3),
         #layout = m, 
         optimizeLatRes = TRUE,residuals =FALSE,
         edge.label.position = 0.65) %>% 
  mark_sig(memo_CSE.est, alpha = c("(n.s.)" = 1.00, "*" = .05, "**" = .01, "***" = .001))
plot(plot_med)
        

```

##### moderation- AA

```{r}

memo_AA.model <- '
ct_mo  =~ B1A + B1I
ct_en =~ B1D + B1E + B1P + B1J
ct_so =~ B1K + B1C + B1G
CT =~ ct_mo + ct_en +ct_so
#B1K	~~	B1G

PCB =~ B2C+ B2E + B2G  + B2K + B2A+ B2I + B2O
B2E ~~ B2G
B2I	~~	B2O 

#PCB =~ B2C+ B2E + B2G  + B2K + B2A+ B2I + B2O + B2M
#B2O ~~ B2M
#B2E ~~ B2G
#B2K	~~	B2A
#B2I	~~	B2O

CSE =~ 1*B8
B8 ~~ 0.22*B8
#B8 ~~ 0.23*B8
#B8 ~~ 0.2*B8

CS =~ CK5A + CK5B  + CK5E + CK5F + CK5G + CK5H + CK5I +CK5J + CK5K + CK5L


AA =~ 1*CK8
CK8 ~~ 0.075*CK8
#CK8 ~~ 0.075*CK8
#CK8 ~~ 0.07*CK8

PRTRM =~ res
res ~~ 6.99*res
#res ~~ 6.60*res
#res ~~ 7.51*res
         
PRTRM ~~ 0*PCB
PRTRM ~~ 0*CS

CT ~ a*PCB + e*CS + mod * PRTRM + + E1 + E3 + E2_bina + E4_bina + set_length_ran + C28D + CJ5
CSE ~ b*CT + + E1 + E3 + E2_bina + E4_bina + set_length_ran + C28D + CJ5
AA ~ c*PCB + d*CSE + E1 + E3 + E2_bina + E4_bina + set_length_ran + C28D + CJ5


#conditional indirect effects 

# all sample
ind_L := (a + mod*(0.82-0.76)) * b* d
ind_M := (a + mod* 0.82) * b* d
ind_H := (a + mod*(0.82 + 0.76)) * b* d


# less-experienced group
#ind_L := (a + mod*(0.66-0.72)) * b * d
#ind_M := (a + mod* 0.66) * b * d
#ind_H := (a + mod*(0.66 + 0.72)) * b * d

# experienced group
#ind_L := (a + mod*(0.88-0.78)) * b * d
#ind_M := (a + mod* 0.88) * b * d
#ind_H := (a + mod*(0.88 + 0.78)) * b * d

#index of moderated mediation
IMM := mod * b * d
'
memo_AA.est <- lavaan::sem(memo_AA.model, data = memo_dataset, estimator = "WLSMV") 
summary(memo_AA.est, fit.measures = TRUE, standardized = TRUE, rsq = TRUE)
parameterEstimates(memo_AA.est, level = 0.95, boot.ci.type = "bca.simple", output = "text")


library(semptools)
plot_med <- semPaths(memo_AA.est, rotation=2,
         sizeMan=6, sizeLat = 10, 
         sizeMan2=4, sizeLat2 =8,
         shapeLat = "ellipse",shapeInt = "triangle",
         curvePivot=TRUE, edge.color="black",
         whatLabels = "std",
         edge.label.cex = 0.8,
         nCharNodes = 4,
         groups = "latents", pastel = TRUE,
         intercepts = FALSE,
         mar = c(1, 3, 1, 3),
         #layout = m, 
         optimizeLatRes = TRUE,residuals =FALSE,
         edge.label.position = 0.65) %>% 
  mark_sig(memo_AA.est, alpha = c("(n.s.)" = 1.00, "*" = .05, "**" = .01, "***" = .001))
plot(plot_med)
        
```
